set hlsearch
set visualbell
set clipboard+=unnamed
set ignorecase smartcase

let mapleader = " "

nnoremap <silent> <leader>w :w<CR>
nnoremap <silent> <leader>q :q<CR>
nnoremap <silent> <leader>v v$h

" 去掉highlight显示
nnoremap <silent> <leader>d :nohlsearch<CR>

" ============ 窗口相关 ============
" 设置窗口跳转
noremap <silent> H <C-W>h
noremap <silent> L <C-W>l
noremap <silent> <C-H> <C-W>h
noremap <silent> <C-L> <C-W>l

" ideavim支持调用idea intellj原生的action.
" 在这里 https://anotepad.com/notes/7g8gn4 列出了可以使用的actionlist
" 也可以通过在 ideavim 中调用 `:actionlist` 查看所有支持的action
" 下面的所有的配置都依赖于idea本身的actionlist. 通过原生的配置, 可以使得
" 原有的vim配置习惯保持不变.

" ========== 1:窗口相关 ==========
" 打开当前文件所在的目录
nnoremap <leader>x :action SelectInProjectView<CR>
" 打开todo所在的目录
nnoremap <leader>td :action ActivateTODOToolWindow<CR>
" 关闭(close)其他的窗口 只剩下vim编辑区域
nnoremap <leader>c :action HideAllWindows<CR>
" 打开projects侧边栏
" nnoremap <leader>t :action ActivateProjectToolWindow<CR>
" ========== 1:窗口相关 ==========

" ========== 2:查找相关 ==========
" 查找最近打开的文件
nnoremap <leader>e :action RecentFiles<CR>
" 跳转到方法定义, 这个也用了`]`, 和vim保持一致
nnoremap <leader>] :action GotoDeclaration<CR>
" 跳转到实现
" 查看实现了该接口的所有类,光标放于类或者方法定义处(implments)
nnoremap <leader>i :action GotoImplementation<CR>
" 输入名称查找class
nnoremap <leader>gc :action GotoClass<CR>
" find use
noremap <leader>u :action FindUsages<CR>
" show use,使用该类的列表
noremap <leader>s :action ShowUsages<CR>
" find in path
noremap <leader>fp :action FindInPath<CR>
" ========== 2:查找相关 ==========

" ========== 3:创建相关 ==========
" 生成新的方法 构造器/getset/toString等(generate)
nnoremap <leader>g :action Generate<CR>
" 创建新的元素,就是新建各种文件（new）
nnoremap <leader>n :action NewElement<CR>
" ========== 3:创建相关 ==========

" ========== 4:跳转相关 ==========
" 跳转到前一个地方, vim的 <C-O>
nnoremap - :action Back<CR>
" 跳转到后一个地方, vim的 <C-I>
nnoremap = :action Forward<CR>
" ========== 4:跳转相关 ==========

" ========== 5:maven相关 ==========
" maven命令全部以m开头
" import
noremap <leader>mr :action Maven.Reimport<CR>
" ========== 5:maven相关 ==========

" ========== 6：类定义 结构 =====
" 获取当前方法的返回类型,就是看某一句的返回类型(define)
nnoremap <leader>d :action ExpressionTypeInfo<CR>
" 查看当前文件的所有方法, class等结构信息 (browser)
nnoremap <leader>b :action ActivateStructureToolWindow<CR>
" 重命名，不止重命名还可以改变路径
nnoremap <leader>m :action RenameFile<CR>
" ========== 6：类定义 结构 =====

" ============ 7:拷贝路径 ============
" 拷贝绝对路径
nnoremap <leader>p :action CopyPaths<CR>
" 拷贝包路径
nnoremap <leader>r :action CopyReference<CR>
" ============ 7:拷贝路径 ============

" ============ 查找相关 ============
" 查找类对应的test
" nnoremap <leader>t :action GotoTest<CR>
" nnoremap <leader>s :action SearchEverywhere<CR>
" ============ 查找相关 ============


" ============ 编译, 运行相关 ============
" nnoremap <leader>r :action Rerun<CR>
" nnoremap <leader>r :action RunClass<CR>
"nnoremap <leader>s :action Run<CR>
" ============ 编译, 运行, debug相关 ============


" 移动并修改当前文件
" nnoremap <leader>m :action RenameFile<CR>
" 查看javadoc
" nnoremap <leader>h :action QuickJavaDoc<CR>

" ============ 调试相关 ============
" 因为debug模式，试试直接用数字键代替F(不行，找找原因)

" 执行至光标处
" nnoremap ;c :action RunToCursor<CR>
" " 光标定位当前执行位置(已占用)
" " nnoremap ;p :action ShowExecutionPoint<CR>
" " 添加断点
" nnoremap ;b :action ToggleLineBreakpoint<CR>
" " 执行语句
" nnoremap ;e :action EvaluateExpression<CR>
" " 开始debug
" nnoremap ;d :action Debug<CR>
" " 使得程序继续执行
" nnoremap ;r :action Resume<CR>
" " step,进入断点,详情
" nnoremap ;s :action StepInto<CR>
" " next,单步执行
" nnoremap ;n :action StepOver<CR>
" " out,跳出详情
" nnoremap ;o :action StepOut<CR>
" ============ 调试相关 ============

" 关闭项目
nnoremap ,q :action CloseProject<CR>

